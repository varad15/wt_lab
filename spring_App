Here's a step-by-step guide to design and develop a Spring Boot application for managing student records using JPA and MySQL:

---

### **1. Project Setup**
- Create a new Spring Boot project using [Spring Initializr](https://start.spring.io/).
  - **Dependencies**: 
    - Spring Web
    - Spring Data JPA
    - MySQL Driver
    - Spring Boot DevTools (optional for development)

---

### **2. Database Configuration**
1. **Create a MySQL Database**:
   ```sql
   CREATE DATABASE student_db;
   ```

2. **Configure `application.properties` or `application.yml`**:
   ```properties
   # Database Configuration
   spring.datasource.url=jdbc:mysql://localhost:3306/student_db
   spring.datasource.username=root
   spring.datasource.password=your_password
   spring.jpa.hibernate.ddl-auto=update

   # Show SQL queries (optional)
   spring.jpa.show-sql=true
   spring.jpa.properties.hibernate.format_sql=true
   ```

---

### **3. Define the Student Entity**
Create an entity class to represent student records.

```java
package com.example.studentapp.model;

import jakarta.persistence.*;

@Entity
public class Student {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String email;
    private String course;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getCourse() {
        return course;
    }

    public void setCourse(String course) {
        this.course = course;
    }
}
```

---

### **4. Create the Repository Layer**
Use Spring Data JPA to interact with the database.

```java
package com.example.studentapp.repository;

import com.example.studentapp.model.Student;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface StudentRepository extends JpaRepository<Student, Long> {
}
```

---

### **5. Create the Service Layer**
Encapsulate the business logic.

```java
package com.example.studentapp.service;

import com.example.studentapp.model.Student;
import com.example.studentapp.repository.StudentRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class StudentService {

    private final StudentRepository studentRepository;

    public StudentService(StudentRepository studentRepository) {
        this.studentRepository = studentRepository;
    }

    public List<Student> listAllStudents() {
        return studentRepository.findAll();
    }

    public Student addStudent(Student student) {
        return studentRepository.save(student);
    }

    public void deleteStudent(Long id) {
        studentRepository.deleteById(id);
    }
}
```

---

### **6. Create the Controller Layer**
Define RESTful APIs for the application.

```java
package com.example.studentapp.controller;

import com.example.studentapp.model.Student;
import com.example.studentapp.service.StudentService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/students")
public class StudentController {

    private final StudentService studentService;

    public StudentController(StudentService studentService) {
        this.studentService = studentService;
    }

    @GetMapping
    public List<Student> getAllStudents() {
        return studentService.listAllStudents();
    }

    @PostMapping
    public Student createStudent(@RequestBody Student student) {
        return studentService.addStudent(student);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteStudent(@PathVariable Long id) {
        studentService.deleteStudent(id);
        return ResponseEntity.noContent().build();
    }
}
```

---

### **7. Testing**
1. **Run the Application**:
   - Use `SpringBootApplication` main class to start the application.

2. **Test Endpoints**:
   - Use Postman or curl to test the APIs.
     - **GET** `/students` - List all students.
     - **POST** `/students` - Add a new student.
       ```json
       {
         "name": "John Doe",
         "email": "john.doe@example.com",
         "course": "Computer Science"
       }
       ```
     - **DELETE** `/students/{id}` - Delete a student by ID.

---

### **8. Optional Enhancements**
- Add **validation** using `javax.validation.constraints` in the `Student` class.
- Add **error handling** using `@ControllerAdvice`.
- Enable **CORS** for frontend integration.
- Add pagination and sorting in the repository.

Would you like help with any of these enhancements?
